for name, model in models.items():
    # Create an empty DataFrame to store results for the current model
    model_results_df = pd.DataFrame()

    # Loop over targets
    for target in targets:
        y_1 = df_1[target]
        features_to_exclude = [target]
        X_1 = df_1.drop(features_to_exclude, axis=1)

        X_train, X_test, y_train, y_test = train_test_split(X_1, y_1, test_size=0.25, random_state=42)
        scaler = StandardScaler()
        X_train = scaler.fit_transform(X_train)
        X_test = scaler.transform(X_test)

        # Define the parameter grid for the current model
        param_grid = param_grids.get(name, {})  # Get the corresponding hyperparameter grid

        # Perform grid search for hyperparameter tuning
        grid_search = GridSearchCV(model, param_grid, scoring='neg_mean_squared_error', cv=5)
        grid_search.fit(X_train, y_train)

        # Use the best parameters to train the model
        best_model = grid_search.best_estimator_
        best_model.fit(X_train, y_train)

        # Make predictions
        y_pred = best_model.predict(X_test)

        # Add columns for the current target to the overall results DataFrame
        model_results_df[target + f'_{name}_true'] = y_test
        model_results_df[target + f'_{name}_pred'] = y_pred

    # Add columns for X_test to the overall results DataFrame
    model_results_df[X_1.columns] = X_test

    # Save the results for the current model to a CSV file
    model_results_df.to_csv(f'{name}_all_targets_result.csv', index=False)
